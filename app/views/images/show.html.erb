<!DOCTYPE html>
<html lang="en">
<style>
    .tooltip-container {
        position: relative;
        display: inline-block;
        margin: 0 0.5rem;
    }

    .tooltip-text {
        visibility: hidden;
        background-color: #333;
        color: #fff;
        text-align: center;
        padding: 0.5rem;
        border-radius: 0.4rem;
        position: absolute;
        bottom: 120%;
        left: 50%;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 0.3s;
        z-index: 1;
        width: 10rem;
        word-wrap: break-word;
        white-space: normal;
        overflow: hidden;
    }

</style>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Show Tag</title>
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  <%= stylesheet_link_tag "application", media: "all" %>
</head>
<body>
<% tag_parts = @image.tag.split(':') %>
<script>
    document.addEventListener("DOMContentLoaded", function() {
        const tooltipContainers = document.querySelectorAll('.tooltip-container');

        tooltipContainers.forEach(container => {
            let hoverTimeout;
            const tooltip = container.querySelector('.tooltip-text');

            container.addEventListener('mouseenter', () => {
                clearTimeout(hoverTimeout);
                hoverTimeout = setTimeout(() => {
                    tooltip.style.visibility = 'visible';
                    tooltip.style.opacity = '0.85';
                }, 1000);
            });

            container.addEventListener('mouseleave', () => {
                clearTimeout(hoverTimeout);
                tooltip.style.visibility = 'hidden';
                tooltip.style.opacity = '0';
            });
        });
    });
</script>


<hr>
<div class="report-page-container">

  <div class="back-button">
    <div class="tooltip-container">
      <%= link_to run_time_object_images_path(@run_time_object), class: "index-page-button" do %>
        <i class="fas fa-arrow-left"></i>
        Go back
      <% end %>
      <span class="tooltip-text">Return to the main image page for this tag</span>
    </div>
  </div>

  <div class="index-title-container">
    <% tag_parts = @image.tag.split(':') %>
    <p class="heading"><%= tag_parts[0] %></p>
    <div>

      <% if @run_time_object.user_id == @current_user.id || @run_time_object.run_time_objects_permissions.exists?(user_id: @current_user.id, permission: 'e') %>
        <div class="tooltip-container">
            <%= link_to edit_run_time_object_image_path(@run_time_object, @image),
                        class: 'index-page-button' do %>
              <i class="fas fa-edit"></i>
              Edit <!-- Font Awesome icon -->
            <% end %>
          <span class="tooltip-text">Modify the selected container image</span>
        </div>
      <% end %>

      <% if @run_time_object.user_id == @current_user.id || @run_time_object.run_time_objects_permissions.exists?(user_id: @current_user.id, permission: 'e') %>
        <div class="tooltip-container">
            <%= button_to run_time_object_image_path(@run_time_object, @image),
                        method: :delete,
                        data: { turbo_method: :delete, turbo_confirm: 'Are you sure you want to delete this image tag?' },
                        class: 'index-page-button delete-button' do %>
              <i class="fas fa-trash-alt"></i>
              Delete
            <% end %>
          <span class="tooltip-text">Remove this specific image from the container</span>
        </div>
      <% end %>

    </div>
  </div>

  <hr>
  <div class="info-container">
    <div class="info-box" style="background-color: #f5f5f5; padding: 1.5rem; border-radius: .8rem;">
      <label>Version:</label>
      <p><%= tag_parts.length > 1 ? tag_parts[1] : 'latest' %></p>
    </div>

    <div class="info-box" style="background-color: #f5f5f5; padding: 1.5rem; border-radius: .8rem;">
      <div class="button-container-tag-show">

        <div class="tooltip-container" style="position: relative;">
            <%= form_with url: download_run_time_object_image_path(@run_time_object.id, @image), method: :get, local: true do %>
              <%= button_tag 'Download Report', class: 'index-page-button' %>
            <% end %>
            <span class="tooltip-text">Click to download the CSV report for this image</span>
            </div>
            <% if @run_time_object.user_id == @current_user.id || @run_time_object.run_time_objects_permissions.exists?(user_id: @current_user.id, permission: 'e') %>
            <div class="tooltip-container" style="position: relative;">
              <%= form_with url: rescan_run_time_object_image_path(@run_time_object.id, @image), method: :post, local: true do %>
                <%= button_tag 'Rescan', class: 'index-page-button' %>
              <% end %>
              <span class="tooltip-text">Click to rescan the container image</span>
            </div>
              <%end %>

          </div>


          </div>
    </div>
  </div>
  <% if @image_report.present? %>
    <div id="summary" class="summary-container">
      <h2 class="summary-title">Vulnerability Summary</h2>
      <% @image_report["Results"].each do |result| %>
        <% target = result["Target"]%>
        <% summary = result["VulnerabilitySummary"]%>
        <div class="target-summary">
          <h3 class="target-title"><%= target %></h3>
          <div class="severity-grid">
            <% summary.each do |severity, count| %>
              <div class="severity-item" data-severity="<%= severity.downcase %>">
                <span class="severity-badge <%= severity.downcase %>"><%= severity %></span>
                <span class="severity-count"><%= count %></span>
              </div>
            <% end %>
          </div>
        </div>
        <% if result["FixableVulnerabilitiesCount"] > 0 %>
          <div class="fixable-vulnerabilities-note">
            <p>
              <strong>ðŸ“¢ Updates Available:</strong>
              <%= result["FixableVulnerabilitiesCount"] %> <%= 'vulnerability'.pluralize(result["FixableVulnerabilitiesCount"]) %>
              in this image can be fixed by updating to the fixed version!
            </p>
          </div>
        <% end %>
      <% end %>
    </div>


    <div id="filters">
      <h2>Filters</h2>
      <label>Severity:
        <select id="severityFilter">
          <option value="ALL">All</option>
          <option value="CRITICAL">Critical</option>
          <option value="HIGH">High</option>
          <option value="MEDIUM">Medium</option>
          <option value="LOW">Low</option>
          <option value="UNDEFINED">Undefined</option>
        </select>
      </label>
      <label>Status:
        <select id="statusFilter">
          <option value="ALL">All</option>
          <option value="affected">Affected</option>
          <option value="fixed">Fixed</option>
          <!-- Add other status options as needed -->
        </select>
      </label>
      <label>Sort by:
        <select id="sortFilter">
          <option value="title_asc">Title: ASC</option>
          <option value="title_desc">Title: DESC</option>
          <option value="id_asc">ID: ASC</option>
          <option value="id_desc">ID: DESC</option>
        </select>
      </label>
    </div>

    <div id="vulnerabilities">
      <h2>Vulnerabilities</h2>
      <% @image_report['Results'].each do |result| %>
        <div class="target-vulnerabilities">
          <h3 class="target-title"><%= result['Target'] %></h3>
          <% if result['Vulnerabilities'] %>
            <table class="vulnerabilities-table">
              <thead>
              <tr>
                <th>Title</th>
                <th>Severity</th>
                <th>ID</th>
                <th>Installed Version</th>
                <th>Fixed Version</th>
                <th>Status</th>
                <th>NIST Identifiers</th>
                <th>Description</th>
                <th>More Info</th>
              </tr>
              </thead>
              <tbody id="vulnerabilitiesTableBody">
              <!-- Table rows will be dynamically populated by JavaScript -->
              </tbody>
            </table>
            <div id="pagination">
              <button id="prevPage">Previous</button>
              <span id="pageInfo"></span>
              <button id="nextPage">Next</button>
            </div>
          <% else %>
            <p class="no-vulnerabilities">No vulnerabilities found for this target.</p>
          <% end %>
        </div>
      <% end %>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const vulnerabilities = <%= raw @image_report['Results'].first['Vulnerabilities'].to_json %>;
            const itemsPerPage = 10;
            let currentPage = 1;
            let filteredVulnerabilities = [...vulnerabilities];

            const tableBody = document.getElementById('vulnerabilitiesTableBody');
            const sortFilter = document.getElementById('sortFilter');
            const prevButton = document.getElementById('prevPage');
            const nextButton = document.getElementById('nextPage');
            const pageInfo = document.getElementById('pageInfo');
            const severityFilter = document.getElementById('severityFilter');
            const statusFilter = document.getElementById('statusFilter');

            function sortVulnerabilities(vulnerabilities) {
                const sortBy = sortFilter.value;
                return vulnerabilities.sort((a, b) => {
                    if (sortBy === 'title_asc') return a.Title.localeCompare(b.Title);
                    if (sortBy === 'title_desc') return b.Title.localeCompare(a.Title);
                    if (sortBy === 'id_asc') return a.VulnerabilityID.localeCompare(b.VulnerabilityID);
                    if (sortBy === 'id_desc') return b.VulnerabilityID.localeCompare(a.VulnerabilityID);
                });
            }

            function displayVulnerabilities(page) {
                const sortedVulnerabilities = sortVulnerabilities(filteredVulnerabilities);
                const start = (page - 1) * itemsPerPage;
                const end = start + itemsPerPage;
                const pageVulnerabilities = filteredVulnerabilities.slice(start, end);

                tableBody.innerHTML = '';
                pageVulnerabilities.forEach(vuln => {
                    const status = vuln.Status ? vuln.Status.toLowerCase() : 'unknown';
                    const row = `
        <tr class="vulnerability" data-severity="${vuln.Severity}" data-status="${status}">
          <td>${vuln.Title}</td>
          <td><span class="severity-badge ${vuln.Severity.toLowerCase()}">${vuln.Severity}</span></td>
          <td>${vuln.VulnerabilityID}</td>
          <td>${vuln.InstalledVersion}</td>
          <td>${vuln.FixedVersion || 'N/A'}</td>
          <td><span class="status-badge ${status}">${status}</span></td>
          <td>
            ${vuln.NISTControlIdentifiers ?
                        vuln.NISTControlIdentifiers.map(nist_id => {
                            const parts = nist_id.split('-');
                            return parts.length === 2 ?
                                `<a href="https://csf.tools/reference/nist-sp-800-53/r4/${parts[0].toLowerCase()}/${nist_id.toLowerCase()}/" target="_blank" class="nist-link">${nist_id}</a>` :
                                `<span class="nist-id">${nist_id}</span>`;
                        }).join(' ') :
                        '<span class="na">N/A</span>'
                    }
          </td>
          <td>
            <div class="description-container">
              <span class="description">${vuln.Description}</span>
              <a href="#" class="toggle-description">Read more</a>
            </div>
          </td>
          <td><a href="${vuln.PrimaryURL}" target="_blank" class="more-info">More Info</a></td>
        </tr>
      `;
                    tableBody.innerHTML += row;
                });
                sortFilter.addEventListener('change', () => {
                    console.log('Sort filter changed');
                    displayVulnerabilities(currentPage);
                });
                pageInfo.textContent = `Page ${currentPage} of ${Math.ceil(filteredVulnerabilities.length / itemsPerPage)}`;
                prevButton.disabled = currentPage === 1;
                nextButton.disabled = currentPage === Math.ceil(filteredVulnerabilities.length / itemsPerPage);

                attachDescriptionToggleListeners();
            }

            function attachDescriptionToggleListeners() {
                const toggleLinks = document.querySelectorAll('.toggle-description');
                toggleLinks.forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault();
                        const description = this.previousElementSibling;
                        if (description.style.display === 'none' || description.style.display === '') {
                            description.style.display = 'inline';
                            this.textContent = 'Read less';
                        } else {
                            description.style.display = 'none';
                            this.textContent = 'Read more';
                        }
                    });
                });
            }

            function applyFilters() {
                const selectedSeverity = severityFilter.value;
                const selectedStatus = statusFilter.value;
                const status = vuln.Status ? vuln.Status.toLowerCase() : 'unknown';
                filteredVulnerabilities = vulnerabilities.filter(vuln => {
                    const severityMatch = selectedSeverity === 'ALL' || vuln.Severity === selectedSeverity;
                    const statusMatch = selectedStatus === 'ALL' || status === selectedStatus;
                    return severityMatch && statusMatch;
                });

                currentPage = 1;
                displayVulnerabilities(currentPage);
            }

            prevButton.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    displayVulnerabilities(currentPage);
                }
            });

            nextButton.addEventListener('click', () => {
                if (currentPage < Math.ceil(filteredVulnerabilities.length / itemsPerPage)) {
                    currentPage++;
                    displayVulnerabilities(currentPage);
                }
            });

            severityFilter.addEventListener('change', applyFilters);
            statusFilter.addEventListener('change', applyFilters);

            // Initial display
            displayVulnerabilities(currentPage);
        });
    </script>
  <% end %>
  <style>
      h1 {
          font-size: 3.6rem;
          font-family: 'Times', serif;
      }

      hr {
          border: none; /* Remove default border */
          height: .2rem; /* Height of the line */
          background-color: #ccc; /* Color of the line */
          margin: 1.0rem 0; /* Spacing around the line */
      }


      .title {
          padding-left: 2%;
      }
      .info-container {
          display: flex;
          flex-direction: column;
          gap: 1.0rem;
          padding-top: 2%
      }

      .info-box {
          border: .1rem solid #ccc;
          padding: 1.0rem;
          margin-bottom: 2.0rem;
          border-radius: .5rem;
          box-shadow: 0 .2rem .5rem rgba(0, 0, 0, 0.1);
          background-color: #E9E1E5;
      }

      .info-box label {
          font-weight: bold;
      }
      .summary-container {
          background-color: #f8f9fa;
          border: .1rem solid #e9ecef;
          border-radius: .8rem;
          padding: 2.0rem;
          margin-bottom: 2rem;
      }

      .summary-title {
          font-size: 1.5rem;
          color: #343a40;
          margin-bottom: 1rem;
          padding-bottom: 0.5rem;
          border-bottom: .2rem solid #dee2e6;
      }

      .target-summary {
          margin-bottom: 1.5rem;
      }

      .target-title {
          font-size: 1.25rem;
          color: #495057;
          margin-bottom: 0.5rem;
      }

      .severity-grid {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(12.0rem, 1fr));
          gap: 0.1rem;
      }

      .severity-item {
          display: flex;
          flex-direction: column;
          align-items: center;
          padding: .8rem;
          border-radius: .4rem;
          transition: transform 0.2s ease-in-out;
      }

      .severity-item:hover {
          transform: translateY(-.2rem);
      }

      .severity-badge {
          padding: .4rem .8rem;
          border-radius: 1.2rem;
          font-size: 0.85rem;
          font-weight: 600;
          margin-bottom: .5rem;
      }

      .severity-count {
          font-size: 1.2rem;
          font-weight: bold;
      }

      .fixable-vulnerabilities-note {
          background-color: #e6f7ff;
          border: .1rem solid #91d5ff;
          border-radius: .8rem;
          padding: 1.5rem;
          margin-top: 2.0rem;
      }

      .fixable-vulnerabilities-note p {
          margin: 0;
          color: #0050b3;
          font-size: 0.95rem;
      }
      #pagination {
          margin-top: 2.0rem;
          text-align: center;
      }

      #pagination button {
          padding: .5rem 1.0rem;
          margin: 0 .5rem;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: .3rem;
          cursor: pointer;
      }

      #pagination button:disabled {
          background-color: #cccccc;
          cursor: not-allowed;
      }

      #pageInfo {
          margin: 0 1.0rem;
      }
      .vulnerabilities-table {
          width: 100%;
          border-collapse: separate;
          border-spacing: 0 .8rem;
          margin-bottom: 2rem;
      }

      .vulnerabilities-table th,
      .vulnerabilities-table td {
          padding: 1.2rem;
          text-align: left;
          border: none;
      }

      .vulnerabilities-table th {
          background-color: #f8f9fa;
          font-weight: 600;
          text-transform: uppercase;
          font-size: 0.85rem;
          color: #495057;
      }

      .vulnerability {
          background-color: transparent;
          transition: background-color 0.3s ease;
      }

      .vulnerability:hover {
          background-color: rgba(0, 0, 0, 0.05);
      }

      .severity-badge,
      .status-badge {
          padding: .4rem .8rem;
          border-radius: 1.2rem;
          font-size: 0.85rem;
          font-weight: 600;
      }

      .severity-badge.critical { background-color: #ffcccb; color: #721c24; }
      .severity-badge.high { background-color: #ffeeba; color: #856404; }
      .severity-badge.medium { background-color: #fff3cd; color: #856404; }
      .severity-badge.low { background-color: #d4edda; color: #155724; }
      .severity-badge.undefined { background-color: #e9ecef; color: #495057; }

      .status-badge.affected { background-color: #cce5ff; color: #004085; }
      .status-badge.fixed { background-color: #d4edda; color: #155724; }

      .nist-identifiers {
          display: flex;
          flex-wrap: wrap;
          gap: .4rem;
      }

      .nist-link,
      .nist-id {
          font-size: 0.85rem;
          padding: .2rem .6rem;
          border-radius: .4rem;
          background-color: #e9ecef;
          color: #495057;
          text-decoration: none;
      }

      .nist-link:hover {
          background-color: #dee2e6;
      }

      .description-container {
          max-width: 30.0rem;
      }

      .description {
          display: none;
          font-size: 0.9rem;
          line-height: 1.4;
          color: #495057;
      }

      .toggle-description {
          cursor: pointer;
          color: #007bff;
          text-decoration: none;
          font-size: 0.9rem;
      }

      .toggle-description:hover {
          text-decoration: underline;
      }

      .more-info {
          color: #007bff;
          text-decoration: none;
          font-size: 0.9rem;
      }

      .more-info:hover {
          text-decoration: underline;
      }

      .target-title {
          font-size: 1.25rem;
          color: #343a40;
          margin-top: 2rem;
          margin-bottom: 1rem;
          border-bottom: .2rem solid #dee2e6;
          padding-bottom: 0.5rem;
      }

      .no-vulnerabilities {
          color: #28a745;
          font-style: italic;
      }
  </style>
</div>
<script>
    // Get the button and the report element
    var rescan = document.getElementById('rescan');
    var scanReport = document.getElementById('scanReport');


</script>

<script>
    var modal = document.getElementById("myModal");
    var btn = document.getElementById("profileBtn");
    var span = document.getElementById("closeModal");
    btn.onclick = function() {
        modal.style.display = "block";
    }
    span.onclick = function() {
        modal.style.display = "none";
    }
    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }
</script>


</body>
</html>