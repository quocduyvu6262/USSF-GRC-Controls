<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>New Image</title>
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  <%= stylesheet_link_tag "application", media: "all" %>
  <style>
      h1 {
          font-size: 36px;
          font-family: 'Times', serif;
      }

      .btn {
          background-color: #4CAF50;
          color: white;
          padding: 10px 20px;
          border: none;
          border-radius: 5px;
          cursor: pointer;
          transition: background-color 0.3s; /* Smooth transition on hover */
      }
      .btn:hover {
          background-color: #45a049;
      }
      .header {
          display: flex;
          justify-content: flex-end;
          gap: 10px; /* Space between buttons */
          margin: 10px;
      }
      .top-left-image {
          position: absolute; /* Positioning the logo */
          top: 20px; /* Adjust the position */
          left: 20px; /* Adjust the position */
      }

      hr {
          border: none; /* Remove default border */
          height: 2px; /* Height of the line */
          background-color: #ccc; /* Color of the line */
          margin: 10px 0; /* Spacing around the line */
      }

      .container {
          display: flex;
          flex-direction: column;
          padding: 8%;
      }

      .title {
          padding-left: 2%;
      }
      .info-container {
          display: flex;
          flex-direction: column;
          gap: 10px;
          padding-top: 2%
      }

      .info-box {
          border: 1px solid #ccc;
          padding: 10px;
          margin-bottom: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
          background-color: #E9E1E5;
      }

      .info-box label {
          font-weight: bold;
      }
      .btn-container {
          display: flex;
          flex-direction: column;
          margin-left: 2%;
          margin-top: 2%;
          gap: 10px;
      }
      .report-button {
          background-color: #333; /* Adjust the background color as needed */
          color: #fff;
          border: none;
          border-radius: 5px;
          cursor: pointer;
          font-size: 16px;
          width: 200px;
          padding: 1.3%;
      }
      .modal {
          display: none; /* Hidden by default */
          position: fixed; /* Stay in place */
          z-index: 1; /* Sit on top */
          left: 0;
          top: 0;
          width: 100%; /* Full width */
          height: 100%; /* Full height */
          overflow: auto; /* Enable scroll if needed */
          background-color: rgb(0,0,0); /* Fallback color */
          background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
      }
      .modal-content {
          background-color: #fefefe;
          margin: 15% auto; /* 15% from the top and centered */
          padding: 20px;
          border: 1px solid #888;
          width: 80%; /* Could be more or less, depending on screen size */
      }
  </style>
</head>
<body>
  <% tag_parts = @image.tag.split(':') %>
  <div style="width: 100%; padding: 20px; display: flex; justify-content: space-between; align-items: center;">
  <h1 class="title" style="margin: 0;"> <%= tag_parts[0] %></h1>
<div style="display: flex; gap: 10px;">
  <%= link_to "Go back", run_time_object_images_path(@run_time_object), class: "btn-create" %>
  <%= link_to "Edit", edit_run_time_object_image_path(@run_time_object, @image), class: "btn-create" %>
  <%= button_to "Delete", run_time_object_image_path(@run_time_object, @image), 
  method: :delete, 
  class: "btn-create" %>

</div>

</div>
      <hr>
      <div class="info-container">
        <div class="info-box" style="background-color: #f5f5f5; padding: 15px; border-radius: 8px;">
          <label>Version:</label>
          <p><%= tag_parts.length > 1 ? tag_parts[1] : 'latest' %></p>
        </div>
        <div class="info-box" style="background-color: #f5f5f5; padding: 15px; border-radius: 8px;">
          <label>Description:</label>
          <p> </p>
        </div>

        <!-- Add a button to toggle the visibility of the scan report -->
        <div class="info-box" style="background-color: #f5f5f5; padding: 15px; border-radius: 8px;">
            <%= form_with url: rescan_run_time_object_image_path(@run_time_object.id, @image), method: :post, local: true do %>
                <%= button_tag 'Rescan', class: 'btn rescan-button', style: 'background-color: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer;' %>
            <% end %>
        </div>


        <div id="summary">
          <h2 class="summary-title">Summary</h2>
          <% @vulnerability_summary.each do |target, summary| %>
            <h3 class="target-title"><%= target %></h3>
            <ul class="severity-list">
              <% summary.each do |severity, count| %>
                <li class="severity-item" data-severity="<%= severity %>">
                  <%= severity %>: <%= count %>
                </li>
              <% end %>
            </ul>
          <% end %>

          <% if @fixable_vulnerabilities_count > 0 %>
            <div class="fixable-vulnerabilities-note">
              <p><strong>Note:</strong> <%= @fixable_vulnerabilities_count %> vulnerabilities in this image can be fixed by just updating to a fixed version!</p>
            </div>
          <% end %>
        </div>

<div id="filters">
  <h2>Filters</h2>
  <label>Severity:
    <select id="severityFilter">
      <option value="ALL">All</option>
      <option value="CRITICAL">Critical</option>
      <option value="HIGH">High</option>
      <option value="MEDIUM">Medium</option>
      <option value="LOW">Low</option>
      <option value="UNKNOWN">Unknown</option>
    </select>
  </label>
  <label>Status:
    <select id="statusFilter">
      <option value="ALL">All</option>
      <option value="affected">Affected</option>
      <option value="fixed">Fixed</option>
      <!-- Add other status options as needed -->
    </select>
  </label>
</div>

<div id="vulnerabilities">
          <h2>Vulnerabilities</h2>
          <% @image_report['Results'].each do |result| %>
            <div class="target-vulnerabilities">
              <h3 class="target-title"><%= result['Target'] %></h3>
              <% if result['Vulnerabilities'] %>
                <table class="vulnerabilities-table">
                  <thead>
                  <tr>
                    <th>Title</th>
                    <th>Severity</th>
                    <th>ID</th>
                    <th>Installed Version</th>
                    <th>Fixed Version</th>
                    <th>Status</th>
                    <th>NIST Identifiers</th>
                    <th>Description</th>
                    <th>More Info</th>
                  </tr>
                  </thead>
                  <tbody id="vulnerabilitiesTableBody">
                  <!-- Table rows will be dynamically populated by JavaScript -->
                  </tbody>
                </table>
                <div id="pagination">
                  <button id="prevPage">Previous</button>
                  <span id="pageInfo"></span>
                  <button id="nextPage">Next</button>
                </div>
              <% else %>
                <p class="no-vulnerabilities">No vulnerabilities found for this target.</p>
              <% end %>
            </div>
          <% end %>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const vulnerabilities = <%= raw @image_report['Results'].first['Vulnerabilities'].to_json %>;
                const itemsPerPage = 10;
                let currentPage = 1;
                let filteredVulnerabilities = [...vulnerabilities];

                const tableBody = document.getElementById('vulnerabilitiesTableBody');
                const prevButton = document.getElementById('prevPage');
                const nextButton = document.getElementById('nextPage');
                const pageInfo = document.getElementById('pageInfo');
                const severityFilter = document.getElementById('severityFilter');
                const statusFilter = document.getElementById('statusFilter');

                function displayVulnerabilities(page) {
                    const start = (page - 1) * itemsPerPage;
                    const end = start + itemsPerPage;
                    const pageVulnerabilities = filteredVulnerabilities.slice(start, end);

                    tableBody.innerHTML = '';
                    pageVulnerabilities.forEach(vuln => {
                        const row = `
        <tr class="vulnerability" data-severity="${vuln.Severity}" data-status="${vuln.Status.toLowerCase()}">
          <td>${vuln.Title}</td>
          <td><span class="severity-badge ${vuln.Severity.toLowerCase()}">${vuln.Severity}</span></td>
          <td>${vuln.VulnerabilityID}</td>
          <td>${vuln.InstalledVersion}</td>
          <td>${vuln.FixedVersion || 'N/A'}</td>
          <td><span class="status-badge ${vuln.Status.toLowerCase()}">${vuln.Status}</span></td>
          <td>
            ${vuln.NISTControlIdentifiers ?
                            vuln.NISTControlIdentifiers.map(nist_id => {
                                const parts = nist_id.split('-');
                                return parts.length === 2 ?
                                    `<a href="https://csf.tools/reference/nist-sp-800-53/r4/${parts[0].toLowerCase()}/${nist_id.toLowerCase()}/" target="_blank" class="nist-link">${nist_id}</a>` :
                                    `<span class="nist-id">${nist_id}</span>`;
                            }).join(' ') :
                            '<span class="na">N/A</span>'
                        }
          </td>
          <td>
            <div class="description-container">
              <span class="description">${vuln.Description}</span>
              <a href="#" class="toggle-description">Read more</a>
            </div>
          </td>
          <td><a href="${vuln.PrimaryURL}" target="_blank" class="more-info">More Info</a></td>
        </tr>
      `;
                        tableBody.innerHTML += row;
                    });

                    pageInfo.textContent = `Page ${currentPage} of ${Math.ceil(filteredVulnerabilities.length / itemsPerPage)}`;
                    prevButton.disabled = currentPage === 1;
                    nextButton.disabled = currentPage === Math.ceil(filteredVulnerabilities.length / itemsPerPage);

                    attachDescriptionToggleListeners();
                }

                function attachDescriptionToggleListeners() {
                    const toggleLinks = document.querySelectorAll('.toggle-description');
                    toggleLinks.forEach(link => {
                        link.addEventListener('click', function(event) {
                            event.preventDefault();
                            const description = this.previousElementSibling;
                            if (description.style.display === 'none' || description.style.display === '') {
                                description.style.display = 'inline';
                                this.textContent = 'Read less';
                            } else {
                                description.style.display = 'none';
                                this.textContent = 'Read more';
                            }
                        });
                    });
                }

                function applyFilters() {
                    const selectedSeverity = severityFilter.value;
                    const selectedStatus = statusFilter.value;

                    filteredVulnerabilities = vulnerabilities.filter(vuln => {
                        const severityMatch = selectedSeverity === 'ALL' || vuln.Severity === selectedSeverity;
                        const statusMatch = selectedStatus === 'ALL' || vuln.Status.toLowerCase() === selectedStatus;
                        return severityMatch && statusMatch;
                    });

                    currentPage = 1;
                    displayVulnerabilities(currentPage);
                }

                prevButton.addEventListener('click', () => {
                    if (currentPage > 1) {
                        currentPage--;
                        displayVulnerabilities(currentPage);
                    }
                });

                nextButton.addEventListener('click', () => {
                    if (currentPage < Math.ceil(filteredVulnerabilities.length / itemsPerPage)) {
                        currentPage++;
                        displayVulnerabilities(currentPage);
                    }
                });

                severityFilter.addEventListener('change', applyFilters);
                statusFilter.addEventListener('change', applyFilters);

                // Initial display
                displayVulnerabilities(currentPage);
            });
        </script>

<style>
.vulnerabilities-table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 1rem;
}

.vulnerabilities-table th,
.vulnerabilities-table td {
  padding: 0.5rem;
  border: 1px solid #ddd;
}

.vulnerabilities-table th {
  background-color: #f2f2f2;
  font-weight: bold;
  text-align: left;
}

.vulnerability[data-severity="CRITICAL"] { background-color: #dc0000; }
.vulnerability[data-severity="HIGH"] { background-color: #fd8c00; }
.vulnerability[data-severity="MEDIUM"] { background-color: #fdc500; }
.vulnerability[data-severity="LOW"] { background-color: #00ac46; }
.vulnerability[data-severity="UNKNOWN"] { background-color: #808080; }

.description-container {
  max-width: 300px;
  overflow: hidden;
}

.description {
  display: none;
}

.toggle-description {
  cursor: pointer;
  color: blue;
  text-decoration: underline;
}

#summary {
  background-color: #f0fdf4;
  border: 1px solid #d1fae5;
  border-radius: 5px;
  padding: 20px;
  margin: 20px 0;
}

.summary-title {
  font-size: 24px;
}

.target-title {
  font-size: 20px;
  color: #4caf50;
  margin-top: 15px;
}

.severity-list {
  list-style-type: none;
  padding-left: 0;
}

.severity-item {
  margin: 5px 0;
  padding: 10px;
  border-radius: 3px;
  border-left: 5px solid;
  color: #1f3f26;
}

.severity-item[data-severity="CRITICAL"] { background-color: #dc0000; }
.severity-item[data-severity="HIGH"] { background-color: #fd8c00; }
.severity-item[data-severity="MEDIUM"] { background-color: #fdc500; }
.severity-item[data-severity="LOW"] { background-color: #00ac46; }
.severity-item[data-severity="UNKNOWN"] { background-color: #808080; }
#pagination {
    margin-top: 20px;
    text-align: center;
}

#pagination button {
    padding: 5px 10px;
    margin: 0 5px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 3px;
    cursor: pointer;
}

#pagination button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
}

#pageInfo {
    margin: 0 10px;
}
</style>

<script>
  // Get the button and the report element
  var rescan = document.getElementById('rescan');
  var scanReport = document.getElementById('scanReport');

  
</script>

  <script>
      var modal = document.getElementById("myModal");
      var btn = document.getElementById("profileBtn");
      var span = document.getElementById("closeModal");
      btn.onclick = function() {
          modal.style.display = "block";
      }
      span.onclick = function() {
          modal.style.display = "none";
      }
      window.onclick = function(event) {
          if (event.target == modal) {
              modal.style.display = "none";
          }
      }
  </script>


</body>
</html>