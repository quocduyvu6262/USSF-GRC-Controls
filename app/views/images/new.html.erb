<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New Tag</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <%= stylesheet_link_tag "application", media: "all" %>
</head>
<body>
    <%= form_with model: @image, url: run_time_object_images_path(@run_time_object.id), local: true do |form| %>
        <div class="image-page">
            <p style="text-align: center; font-size: 40px;">New Tag</p>
            <div class="form-container">
                <div class="form-group">
                    <%= form.label :tag, "Tag URL", class: "form-label" %>
                    <%= form.text_field :tag, class: "form-control", placeholder: "Value", required: true %>
                </div>
                <div class="actions">
                    <%= form.submit "Submit", class: "btn-create" %>
                    <%= link_to "Go back", run_time_object_images_path(), class: "btn-create" %>
                </div>
            </div>
        </div>
    <% end %>
    
    <% if @image.errors.any? %>
        <div id="error_explanation">
            <h2><%= pluralize(@image.errors.count, "error") %> prohibited this image from being saved:</h2>
            <ul>
                <% @image.errors.full_messages.each do |message| %>
                    <li><%= message %></li>
                <% end %>
            </ul>
        </div>
    <% end %>

    <script>
    document.addEventListener('DOMContentLoaded', function () {
    const form = document.querySelector('form');
    const imageTagInput = document.querySelector('input[name="image[tag]"]');

    form.addEventListener('submit', function (e) {
        e.preventDefault(); // Prevent form from submitting immediately

        const imageUrl = imageTagInput.value;
        if (isPrivateRegistry(imageUrl)) {
            handlePrivateRegistry(imageUrl, this);
        } else {
            this.submit(); // Submit form normally for public registry
        }
    });

    function isPrivateRegistry(imageUrl) {
        const privatePatterns = [
            /.*\.azurecr\.io/,
            /.*\.dkr\.ecr\..*\.amazonaws\.com/,
            /gcr\.io/,
            /.*\.jfrog\.io/,
            /.*\.registry\..*/,
            /localhost\:5001/,
            /harbor\.*/,
            /nexus\.*/
        ];
        return privatePatterns.some(pattern => pattern.test(imageUrl));
    }

    function handlePrivateRegistry(imageUrl, form) {
        const registry = imageUrl.split('/')[0];
        const credentialsPopup = createCredentialsPopup(registry);
        document.body.appendChild(credentialsPopup);

        const usernameInput = credentialsPopup.querySelector('input[name="username"]');
        const passwordInput = credentialsPopup.querySelector('input[name="password"]');
        const toggleButton = credentialsPopup.querySelector('.toggle-password');
        const submitButton = credentialsPopup.querySelector('.submit-credentials');

        // Toggle password visibility
        toggleButton.addEventListener('click', () => {
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                toggleButton.textContent = 'Hide';
            } else {
                passwordInput.type = 'password';
                toggleButton.textContent = 'Show';
            }
        });

        // Handle credentials submission
        submitButton.addEventListener('click', () => {
            const username = usernameInput.value.trim();
            const password = passwordInput.value.trim();

            if (!username || !password) {
                alert('Both username and password are required.');
                return;
            }

            // Add hidden fields for credentials
            const usernameField = document.createElement('input');
            usernameField.type = 'hidden';
            usernameField.name = 'registry_username';
            usernameField.value = username;
            form.appendChild(usernameField);

            const passwordField = document.createElement('input');
            passwordField.type = 'hidden';
            passwordField.name = 'registry_password';
            passwordField.value = password;
            form.appendChild(passwordField);

            document.body.removeChild(credentialsPopup); // Remove popup
            form.submit(); // Submit the form with credentials
        });
    }

    function createCredentialsPopup(registry) {
        const popup = document.createElement('div');
        popup.style.position = 'fixed';
        popup.style.top = '50%';
        popup.style.left = '50%';
        popup.style.transform = 'translate(-50%, -50%)';
        popup.style.backgroundColor = '#fff';
        popup.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';
        popup.style.borderRadius = '8px';
        popup.style.padding = '20px';
        popup.style.zIndex = '1000';
        popup.style.width = '350px';
        popup.style.textAlign = 'center';

        popup.innerHTML = `
            <h3 style="margin-bottom: 15px;">Enter Credentials for ${registry}</h3>
            <input
                type="text"
                name="username"
                placeholder="Enter username"
                style="width: 100%; padding: 10px; margin-bottom: 15px; box-sizing: border-box;"
            />
            <div style="position: relative; margin-bottom: 15px;">
                <input
                    type="password"
                    name="password"
                    placeholder="Enter password"
                    style="width: 100%; padding: 10px; box-sizing: border-box;"
                />
                <button type="button" class="toggle-password" 
                    style="position: absolute; right: 10px; top: 50%; transform: translateY(-50%); background: none; border: none; color: #007BFF; cursor: pointer;">
                    Show
                </button>
            </div>
            <button 
                type="button" 
                class="submit-credentials" 
                style="padding: 10px 20px; background-color: #007BFF; color: #fff; border: none; border-radius: 4px; cursor: pointer;">
                Submit
            </button>
        `;

        return popup;
    }
});
    </script>
</body>
</html>
