<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New Tag</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <%= stylesheet_link_tag "application", media: "all" %>
</head>
<body>
    <%= form_with model: @image, url: run_time_object_images_path(@run_time_object.id), local: true do |form| %>
        <div class="image-page">
            <p style="text-align: center; font-size: 40px;">New Tag</p>
            <div class="form-container">
                <div class="form-group">
                    <%= form.label :tag, "Tag URL", class: "form-label" %>
                    <%= form.text_field :tag, class: "form-control", placeholder: "Value", required: true %>
                </div>
                <div class="actions">
                    <%= form.submit "Submit", class: "btn-create" %>
                    <%= link_to "Go back", run_time_object_images_path(), class: "btn-create" %>
                </div>
            </div>
        </div>
    <% end %>
    
    <% if @image.errors.any? %>
        <div id="error_explanation">
            <h2><%= pluralize(@image.errors.count, "error") %> prohibited this image from being saved:</h2>
            <ul>
                <% @image.errors.full_messages.each do |message| %>
                    <li><%= message %></li>
                <% end %>
            </ul>
        </div>
    <% end %>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.querySelector('form');
        const imageTagInput = document.querySelector('input[name="image[tag]"]');
    
        form.addEventListener('submit', function(e) {
            e.preventDefault(); // Prevent form from submitting immediately
            
            const imageUrl = imageTagInput.value;
            if (isPrivateRegistry(imageUrl)) {
                handlePrivateRegistry(imageUrl, this);
            } else {
                this.submit(); // Submit form normally for public registry
            }
        });
    
        function isPrivateRegistry(imageUrl) {
            const privatePatterns = [
                /.*\.azurecr\.io/,
                /.*\.dkr\.ecr\..*\.amazonaws\.com/,
                /gcr\.io/,
                /.*\.jfrog\.io/,
                /.*\.registry\..*/,
                /localhost\:5001/,
                /harbor\.*/,
                /nexus\.*/
            ];
            return privatePatterns.some(pattern => pattern.test(imageUrl));
        }
    
        function handlePrivateRegistry(imageUrl, form) {
            const registry = imageUrl.split('/')[0];
            const result = confirm(`${registry} appears to be a private registry. Would you like to enter credentials?`);
            
            if (result) {
                const username = prompt('Enter registry username:');
                if (username === null) return;
    
                // Create a container for password input and toggle
                const passwordContainer = document.createElement('div');
                passwordContainer.style.position = 'relative';
    
                // Create the password input field
                const passwordInput = document.createElement('input');
                passwordInput.type = 'password';
                passwordInput.placeholder = 'Enter registry password';
                passwordInput.style.width = '100%';
                passwordInput.style.marginBottom = '8px';
    
                // Create the toggle button for the password field
                const toggleButton = document.createElement('button');
                toggleButton.type = 'button';
                toggleButton.textContent = '👁️';
                toggleButton.style.position = 'absolute';
                toggleButton.style.right = '10px';
                toggleButton.style.top = '5px';
                toggleButton.style.border = 'none';
                toggleButton.style.background = 'none';
                toggleButton.style.cursor = 'pointer';
    
                // Append the password input and toggle button to the container
                passwordContainer.appendChild(passwordInput);
                passwordContainer.appendChild(toggleButton);
    
                // Append the container to the form
                form.appendChild(passwordContainer);
    
                // Handle toggle button click
                toggleButton.addEventListener('click', () => {
                    if (passwordInput.type === 'password') {
                        passwordInput.type = 'text';
                        toggleButton.textContent = '🙈';
                    } else {
                        passwordInput.type = 'password';
                        toggleButton.textContent = '👁️';
                    }
                });
    
                // Add hidden fields for credentials
                const usernameField = document.createElement('input');
                usernameField.type = 'hidden';
                usernameField.name = 'registry_username';
                usernameField.value = username;
                form.appendChild(usernameField);
    
                // Wait for the user to enter the password and then submit
                passwordInput.addEventListener('change', () => {
                    const passwordField = document.createElement('input');
                    passwordField.type = 'hidden';
                    passwordField.name = 'registry_password';
                    passwordField.value = passwordInput.value;
                    form.appendChild(passwordField);
    
                    form.submit(); // Submit the form with credentials
                });
            }
        }
    });    
    </script>
</body>
</html>
